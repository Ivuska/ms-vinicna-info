name: Cypress Tests

on:
  workflow_call:
    secrets:
      CYPRESS_API_KEY: 
        required: true
      CYPRESS_RECORD_KEY: 
        required: true
      GITHUB_TOKEN: 
        required: true
      RECAPTCHA_SECRET_KEY: 
        required: true
      RECAPTCHA_SITE_KEY:
        required: true
      SENDER_EMAIL: 
        required: true
      PASSWORD: 
        required: true
      SERVER: 
        required: true
      PORT: 
        required: true
  workflow_dispatch:

jobs:
  test: 
    name: Run Tests
    runs-on: ubuntu-latest
    container: cypress/browsers:node16.17.1-chrome106-ff105-edge
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cypress install
        uses: cypress-io/github-action@v4.2.0
        with:
          # Disable running of tests within install job
          runTests: false

      - name: Install Flask
        run: |
          apt-get update
          apt-get install -y python3 python3-pip
          pip3 install -r requirements.txt

      - name: Cypress run
        uses: cypress-io/github-action@v4.2.0
        with:
          start: |
            npx wrangler dev ./cf_worker/index.js --local --var AUTH_TOKEN:${{ env.WORKER_AUTH_TOKEN }} --log-level=debug
            flask run
          browser: chrome
          record: true
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_API_KEY: ${{ secrets.CYPRESS_API_KEY }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKER_AUTH_TOKEN: '123456'
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
          WORKER_URL: 'http://127.0.0.1:8787'
          FLASK_APP: app.app
          FLASK_ENV: development
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          SERVER: ${{ secrets.SERVER }}
          PORT: ${{ secrets.PORT }}
